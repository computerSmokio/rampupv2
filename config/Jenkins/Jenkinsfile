
pipeline{
    agent any
    environment{
        bk_url=credentials('bk_url')
        db_user=credentials('db_user')
        db_pass=credentials('db_pass')
        db_name=credentials('db_name')
        bk_port=credentials('bk_port')
        fr_port=credentials('fr_port')
    }
    stages{
        stage('GitCheckout & deploy infra') {
            steps{
                checkout scm
                script{
                    withCredentials([aws(credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'terraform -chdir=./tf-setup-services init'
                        sh 'terraform -chdir=./tf-setup-services apply -auto-approve'
                        master_node_ip  = sh(
                            script: "aws ec2 describe-instances --region sa-east-1  --filter Name=instance.group-name,Values=master-node-sg --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text",
                            returnStdout: true)
                        worker_node_ip  = sh(
                            script: "aws ec2 describe-instances --region sa-east-1  --filter Name=instance.group-name,Values=worker-node-sg --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text",
                            returnStdout: true)
                        master_node_ip=master_node_ip.substring(0,master_node_ip.indexOf('\n'))
                        worker_node_ip=worker_node_ip.substring(0,worker_node_ip.indexOf('\n'))
                    }
                    withCredentials([file(credentialsId:'ssh_keypair', variable:'ssh_key')]){
                        withCredentials([file(credentialsId:'chef_keypair', variable:'chef_key')]){
                            sh "knife cookbook upload -k ${chef_key} -a"
                            sh "knife role from file -k ${chef_key} './../../chef-repo/roles/worker-cluster-role.json'"
                            sh "knife role from file -k ${chef_key} './../../chef-repo/roles/master-cluster-role.json'"
                            sh "knife bootstrap -k ${chef_key} --chef-license=accept --yes --ssh-verify-host-key never -U ec2-user -i ${ssh_key} --sudo -N master-node -r 'role[master-cluster]' $master_node_ip"
                            sh "knife bootstrap -k ${chef_key} --chef-license=accept --yes --ssh-verify-host-key never -U ec2-user -i ${ssh_key} --sudo -N worker-node -r 'role[worker-cluster]' $worker_node_ip"
                        }
                        join_command  = sh(
                            script: "ssh -o StrictHostKeyChecking=no -i ${ssh_key} ec2-user@${master_node_ip} kubeadm token create --print-join-command --ttl 1m",
                            returnStdout: true)
                        sh "ssh -o StrictHostKeyChecking=no -i ${ssh_key} ec2-user@${worker_node_ip} sudo ${join_command}"
                        sh "ssh -o StrictHostKeyChecking=no -i ${ssh_key} ec2-user@${master_node_ip} kubectl create secret generic db-secrets --from-literal=db.entrypoint=mokk.url --from-literal=db.user=${db_user} --from-literal=db.pass=${db_pass} --from-literal=db.name=${db_name} -n rampup-backend-ns"
                        sh "ssh -o StrictHostKeyChecking=no -i ${ssh_key} ec2-user@${master_node_ip} kubectl create secret generic backend-secrets --from-literal=bk.url=${bk_url} --from-literal=bk.port=${bk_port} -n rampup-backend-ns"
                        sh "ssh -o StrictHostKeyChecking=no -i ${ssh_key} ec2-user@${master_node_ip} kubectl create secret generic frontend-secrets --from-literal=fr.port=${fr_port} --from-literal=bk.url=${bk_url} -n rampup-frontend-ns"
                    }
                }
            }
        }
    }
}
