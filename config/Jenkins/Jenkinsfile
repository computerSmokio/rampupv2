pipeline{
    agent any
    stages{
        stage('GitCheckout & deploy infra') {
            steps{
                checkout scm
                script{
                    withCredentials([aws(credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'terraform -chdir=./tf-setup-services init'
                        sh 'terraform -chdir=./tf-setup-services apply -auto-approve'
                        master_node_ip  = sh(
                            script: "aws ec2 describe-instances --region sa-east-1  --filter Name=instance.group-name,Values=master-node-sg --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text",
                            returnStdout: true)
                        worker_nodes_ip  = sh(
                            script: "aws ec2 describe-instances --region sa-east-1  --filter Name=instance.group-name,Values=worker-node-sg --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text",
                            returnStdout: true).split()
                        master_node_ip=master_node_ip.substring(0,master_node_ip.indexOf('\n'))
                    }
                    withCredentials([file(credentialsId:'ssh_keypair', variable:'ssh_key')]){
                        withCredentials([file(credentialsId:'chef_keypair', variable:'chef_key')]){
                            sh "knife cookbook upload -k ${chef_key} -a"
                            sh "knife role from file -k ${chef_key} './../../chef-repo/roles/worker-cluster-role.json'"
                            sh "knife role from file -k ${chef_key} './../../chef-repo/roles/master-cluster-role.json'"
                            sh "knife bootstrap -k ${chef_key} --chef-license=accept --yes --ssh-verify-host-key never -U ec2-user -i ${ssh_key} --sudo -N master-node -r 'role[master-cluster]' $master_node_ip"
                            worker_nodes_ip.each{ value -> 
                                sh "knife bootstrap -k ${chef_key} --chef-license=accept --yes --ssh-verify-host-key never -U ec2-user -i ${ssh_key} --sudo -N 'worker-node-$value' -r 'role[worker-cluster]' $value"
                            }
                        }
                        join_command  = sh(
                            script: "ssh -o StrictHostKeyChecking=no -i ${ssh_key} ec2-user@${master_node_ip} kubeadm token create --print-join-command --ttl 1m",
                            returnStdout: true)
                        worker_nodes_ip.each{ value -> 
                            sh "ssh -o StrictHostKeyChecking=no -i ${ssh_key} ec2-user@${value} sudo ${join_command}"
                        }
                        sh "ssh -o StrictHostKeyChecking=no -i ${ssh_key} ec2-user@${master_node_ip} kubectl wait pod -n monitoring -l app=grafana --for condition=Ready=True --timeout=-1s"
                        sh "sleep 10s"
                    }
                }
            }
        }
        stage('Configure Grafana') {
            steps{
                script{
                    organization_id  = sh(
                        script: "curl -X POST -H 'Host: app.metrics.com' -H \"Content-Type: application/json\" -d '{\"name\":\"apiorg\"}' http://admin:admin@${worker_nodes_ip[0]}:30100/api/orgs",
                        returnStdout: true)
                    organization_id = readJSON text: "${organization_id}"
                    sh "curl -X POST -H 'Host: app.metrics.com' http://admin:admin@${worker_nodes_ip[0]}:30100/api/user/using/${organization_id.orgId}"
                    apikey  = sh(
                        script: "curl -X POST -H 'Host: app.metrics.com' -H 'Content-Type: application/json' -d '{\"name\":\"apikeycurl\", \"role\":\"Admin\"}' http://admin:admin@${worker_nodes_ip[0]}:30100/api/auth/keys",
                        returnStdout: true)
                    apikey = readJSON text: "${apikey}"
                    sh "curl --insecure -X POST -H 'Host: app.metrics.com' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${apikey.key}' -d '@./config/grafana/datasource.json' http://${worker_nodes_ip[0]}:30100/api/datasources"
                    sh "curl --insecure -X POST -H 'Host: app.metrics.com' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${apikey.key}' -d '@./config/grafana/folder.json' http://${worker_nodes_ip[0]}:30100/api/folders"
                    sh "curl -X POST -H 'Host: app.metrics.com' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${apikey.key}' -d '@./config/grafana/dashboard.json' http://${worker_nodes_ip[0]}:30100/api/dashboards/db"
                    sh "curl -X POST -H 'Host: app.metrics.com' -H 'Content-Type: application/json' -H 'Authorization: Bearer ${apikey.key}' -d '@./config/grafana/dashboard_panels.json' http://${worker_nodes_ip[0]}:30100/api/dashboards/db"
                }
            }
        }
    }
}
